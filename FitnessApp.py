import os
import json
import tkinter as tk
from datetime import datetime
import random
from tkinter import messagebox
import customtkinter as ctk

# Theme and color settings
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("dark-blue")

# Colors
MAIN_BG = "#150050"          # Main background
WINDOW_BG = "#000000"        # Window background
ACCENT = "#3F0071"           # Neon purple elements
TEXT_COLOR = "#E0B3FF"       # Light purple text
GLOW = "#8A2BE2"             # Soft glowing accent
WATER_COLOR = "#87CEEB"      # Sky blue for water
GLASS_OUTLINE = "#A9A9A9"    # Gray for glass outline

USER_FILE = "users.json"
USER_DATA_FILE = "user_data.json"
os.makedirs("data", exist_ok=True)

class FitnessApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        # Main window
        self.title("Fitness Trainer")
        self.geometry("1100x700")
        self.minsize(900, 600)
        self.configure(fg_color=MAIN_BG)

        self.user_data = None
        self.water_intake = tk.DoubleVar(value=0.0)
        self.water_goal = 2.0
        self.total_calories = tk.DoubleVar(value=0.0)
        self.steps = tk.DoubleVar(value=0.0)
        self.goals = []
        self.weight_text = tk.StringVar(value="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ 'Weight'")

        # Start with login screen
        self.show_login_screen()

    # ---------------------------- Utility methods ----------------------------
    def save_user(self, username, password):
        data = {}
        file_path = os.path.join("data", USER_FILE)
        if os.path.exists(file_path):
            with open(file_path, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = {}
        data[username] = {"password": password}
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4)

    def verify_user(self, username, password):
        file_path = os.path.join("data", USER_FILE)
        if not os.path.exists(file_path):
            return False
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                users = json.load(f)
            except json.JSONDecodeError:
                return False
        return username in users and users[username]["password"] == password

    def _save_user_data(self):
        data = {
            "username": self.user_data["username"] if self.user_data else "Guest",
            "water_intake": self.water_intake.get(),
            "total_calories": self.total_calories.get(),
            "steps": self.steps.get(),
            "goals": self.goals
        }
        with open(os.path.join("data", USER_DATA_FILE), "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    def _load_user_data(self):
        try:
            with open(os.path.join("data", USER_DATA_FILE), "r", encoding="utf-8") as f:
                data = json.load(f)
                self.water_intake.set(data.get("water_intake", 0.0))
                self.total_calories.set(data.get("total_calories", 0.0))
                self.steps.set(data.get("steps", 0.0))
                self.goals = data.get("goals", [])
                return data
        except FileNotFoundError:
            return {"username": "Guest", "settings": {}}

    # ---------------------------- Login screen ----------------------------
    def show_login_screen(self):
        self.clear_window()

        frame = ctk.CTkFrame(self, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.4, relheight=0.5)

        title = ctk.CTkLabel(frame, text="–í—Ö–æ–¥", text_color=TEXT_COLOR, font=("Segoe UI", 28, "bold"))
        title.pack(pady=20)

        username_entry = ctk.CTkEntry(frame, placeholder_text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", fg_color=MAIN_BG, border_color=ACCENT)
        username_entry.pack(pady=10, padx=40, fill="x")

        password_entry = ctk.CTkEntry(frame, placeholder_text="–ü–∞—Ä–æ–ª—å", show="‚Ä¢", fg_color=MAIN_BG, border_color=ACCENT)
        password_entry.pack(pady=10, padx=40, fill="x")

        def login():
            u = username_entry.get().strip()
            p = password_entry.get().strip()
            if self.verify_user(u, p):
                self.user_data = {"username": u}
                self._load_user_data()
                self._build_main_ui()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

        login_btn = ctk.CTkButton(frame, text="–í–æ–π—Ç–∏", fg_color=ACCENT, hover_color=GLOW, command=login)
        login_btn.pack(pady=15)

        reg_btn = ctk.CTkButton(frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", fg_color="#222222", command=self.show_register_screen)
        reg_btn.pack(pady=10)

    # ---------------------------- Register screen ----------------------------
    def show_register_screen(self):
        self.clear_window()

        frame = ctk.CTkFrame(self, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.4, relheight=0.6)

        title = ctk.CTkLabel(frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", text_color=TEXT_COLOR, font=("Segoe UI", 28, "bold"))
        title.pack(pady=20)

        username_entry = ctk.CTkEntry(frame, placeholder_text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", fg_color=MAIN_BG, border_color=ACCENT)
        username_entry.pack(pady=10, padx=40, fill="x")

        password_entry = ctk.CTkEntry(frame, placeholder_text="–ü–∞—Ä–æ–ª—å", show="‚Ä¢", fg_color=MAIN_BG, border_color=ACCENT)
        password_entry.pack(pady=10, padx=40, fill="x")

        confirm_entry = ctk.CTkEntry(frame, placeholder_text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", show="‚Ä¢", fg_color=MAIN_BG, border_color=ACCENT)
        confirm_entry.pack(pady=10, padx=40, fill="x")

        def register():
            u = username_entry.get().strip()
            p = password_entry.get().strip()
            c = confirm_entry.get().strip()
            if not u or not p:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
            if p != c:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return
            self.save_user(u, p)
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.show_login_screen()

        reg_btn = ctk.CTkButton(frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", fg_color=ACCENT, hover_color=GLOW, command=register)
        reg_btn.pack(pady=20)

        back_btn = ctk.CTkButton(frame, text="–ù–∞–∑–∞–¥", fg_color="#222222", command=self.show_login_screen)
        back_btn.pack()

    # ---------------------------- Clear window ----------------------------
    def clear_window(self):
        for widget in self.winfo_children():
            widget.destroy()

    # ---------------------------- Main UI ----------------------------
    def _build_main_ui(self):
        self.clear_window()

        # Header
        header = ctk.CTkFrame(self, fg_color=ACCENT, corner_radius=12, border_width=2, border_color=GLOW)
        header.place(relx=0.02, rely=0.02, relwidth=0.96, relheight=0.1)

        user_label = ctk.CTkLabel(header, text=f"Welcome, {self.user_data['username']}!", text_color=TEXT_COLOR, font=("Segoe UI", 22, "bold"))
        user_label.pack(pady=10, side="left", padx=20)

        current_date = ctk.CTkLabel(header, text=datetime.now().strftime("%d.%m.%Y"), text_color=TEXT_COLOR, font=("Segoe UI", 18))
        current_date.pack(pady=10, side="right", padx=20)

        # Main tab area
        tabview = ctk.CTkTabview(self, fg_color=WINDOW_BG, segmented_button_fg_color=ACCENT,
                                 segmented_button_selected_color=GLOW, segmented_button_unselected_color="#2A004F", corner_radius=15)
        tabview.place(relx=0.02, rely=0.15, relwidth=0.96, relheight=0.8)

        # Add tabs
        panel_tab = tabview.add("Dashboard")
        calories_tab = tabview.add("Calories")
        water_tab = tabview.add("Water")
        weight_tab = tabview.add("Weight")
        health_tab = tabview.add("Health")
        meditation_tab = tabview.add("Meditation")
        sleep_tab = tabview.add("Sleep")
        goals_tab = tabview.add("Goals")

        # Fill tabs
        self._build_panel_tab(panel_tab)
        self._build_calories_tab(calories_tab)
        self._build_water_tab(water_tab)
        self._build_weight_tab(weight_tab)
        self._build_health_tab(health_tab)
        self._build_meditation_tab(meditation_tab)
        self._build_sleep_tab(sleep_tab)
        self._build_goals_tab(goals_tab)

        # Exit button
        exit_btn = ctk.CTkButton(self, text="–í—ã—Ö–æ–¥", fg_color="#222222", text_color="white",
                                 hover_color="#550099", command=self.show_login_screen)
        exit_btn.place(relx=0.9, rely=0.94, relwidth=0.08, relheight=0.05)

    # ---------------------------- Dashboard ----------------------------
    def _build_panel_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)
        title = ctk.CTkLabel(frame, text="–û–±—â–∞—è –ø–∞–Ω–µ–ª—å", font=("Segoe UI", 26, "bold"), text_color=TEXT_COLOR)
        title.pack(pady=15)

        blocks_frame = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        blocks_frame.pack(pady=10, padx=20, fill="both", expand=True)

        # Calories block
        calories_block = ctk.CTkFrame(blocks_frame, fg_color=WINDOW_BG, corner_radius=10, border_width=2, border_color=GLOW)
        calories_block.pack(pady=5, padx=10, fill="x")
        ctk.CTkLabel(calories_block, text="üçé –ö–∞–ª–æ—Ä–∏–∏", font=("Segoe UI", 20, "bold"), text_color=GLOW).pack(pady=5)
        ctk.CTkLabel(calories_block, textvariable=self.total_calories, font=("Segoe UI", 18), text_color=TEXT_COLOR).pack()
        ctk.CTkLabel(calories_block, text="–°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏ —Å—Ç–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π.", font=("Segoe UI", 14), text_color="#CFA0FF").pack(pady=5)

        # Water block
        water_block = ctk.CTkFrame(blocks_frame, fg_color=WINDOW_BG, corner_radius=10, border_width=2, border_color=GLOW)
        water_block.pack(pady=5, padx=10, fill="x")
        ctk.CTkLabel(water_block, text="üíß –í–æ–¥–∞", font=("Segoe UI", 20, "bold"), text_color=GLOW).pack(pady=5)
        water_text = tk.StringVar(value=f"{self.water_intake.get():.2f} / {self.water_goal:.1f} –ª")
        ctk.CTkLabel(water_block, textvariable=water_text, font=("Segoe UI", 18), text_color=TEXT_COLOR).pack()
        ctk.CTkLabel(water_block, text="–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –≤–∞–∂–Ω–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è.", font=("Segoe UI", 14), text_color="#CFA0FF").pack(pady=5)

        # Weight block
        weight_block = ctk.CTkFrame(blocks_frame, fg_color=WINDOW_BG, corner_radius=10, border_width=2, border_color=GLOW)
        weight_block.pack(pady=5, padx=10, fill="x")
        ctk.CTkLabel(weight_block, text="‚öñÔ∏è –í–µ—Å", font=("Segoe UI", 20, "bold"), text_color=GLOW).pack(pady=5)
        ctk.CTkLabel(weight_block, textvariable=self.weight_text, font=("Segoe UI", 18), text_color=TEXT_COLOR).pack()
        ctk.CTkLabel(weight_block, text="–†–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.", font=("Segoe UI", 14), text_color="#CFA0FF").pack(pady=5)

        # Steps block
        steps_block = ctk.CTkFrame(blocks_frame, fg_color=WINDOW_BG, corner_radius=10, border_width=2, border_color=GLOW)
        steps_block.pack(pady=5, padx=10, fill="x")
        ctk.CTkLabel(steps_block, text="üëü –®–∞–≥–∏", font=("Segoe UI", 20, "bold"), text_color=GLOW).pack(pady=5)
        ctk.CTkLabel(steps_block, textvariable=self.steps, font=("Segoe UI", 18), text_color=TEXT_COLOR).pack()
        ctk.CTkLabel(steps_block, text="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ª—É—á—à–∞–µ—Ç —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.", font=("Segoe UI", 14), text_color="#CFA0FF").pack(pady=5)

        # Goals block
        goals_block = ctk.CTkFrame(blocks_frame, fg_color=WINDOW_BG, corner_radius=10, border_width=2, border_color=GLOW)
        goals_block.pack(pady=5, padx=10, fill="x")
        ctk.CTkLabel(goals_block, text="üéØ –¶–µ–ª–∏", font=("Segoe UI", 20, "bold"), text_color=GLOW).pack(pady=5)
        goals_text = tk.StringVar(value=f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(self.goals)}")
        ctk.CTkLabel(goals_block, textvariable=goals_text, font=("Segoe UI", 18), text_color=TEXT_COLOR).pack()
        ctk.CTkLabel(goals_block, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏.", font=("Segoe UI", 14), text_color="#CFA0FF").pack(pady=5)

    # ---------------------------- Calories ----------------------------
    def _build_calories_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)
        title = ctk.CTkLabel(frame, text="–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π", font=("Segoe UI", 26, "bold"), text_color=TEXT_COLOR)
        title.pack(pady=15)

        calories_block = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        calories_block.pack(pady=10, padx=20, fill="x")

        foods = {
            "–Ø–±–ª–æ–∫–æ": 52, "–ë–∞–Ω–∞–Ω": 89, "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞": 165, "–†–∏—Å": 130, "–•–ª–µ–±": 265,
            "–ú–æ–ª–æ–∫–æ": 42, "–ì—Ä–µ—á–∫–∞": 123, "–û–≤—Å—è–Ω–∫–∞": 68, "–Ø–π—Ü–æ": 68, "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å": 77,
            "–ú–æ—Ä–∫–æ–≤—å": 41, "–û–≥—É—Ä–µ—Ü": 16, "–¢–æ–º–∞—Ç—ã": 18, "–õ–æ—Å–æ—Å—å": 208, "–ê–≤–æ–∫–∞–¥–æ": 160
        }

        input_frame = ctk.CTkFrame(calories_block, fg_color=WINDOW_BG)
        input_frame.pack(pady=10, fill="x")

        food_var = tk.StringVar(value=list(foods.keys())[0])
        amount_var = tk.DoubleVar(value=100.0)

        ctk.CTkLabel(input_frame, text="–ü—Ä–æ–¥—É–∫—Ç:", text_color=TEXT_COLOR, font=("Segoe UI", 16)).grid(row=0, column=0, padx=10, pady=5)
        food_menu = ctk.CTkOptionMenu(input_frame, variable=food_var, values=list(foods.keys()), fg_color=ACCENT, button_color=GLOW)
        food_menu.grid(row=0, column=1, padx=10, pady=5)

        ctk.CTkLabel(input_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≥):", text_color=TEXT_COLOR, font=("Segoe UI", 16)).grid(row=0, column=2, padx=10, pady=5)
        ctk.CTkEntry(input_frame, textvariable=amount_var, width=100).grid(row=0, column=3, padx=10, pady=5)

        def add_food():
            food = food_var.get()
            amount = amount_var.get()
            calories = (foods[food] * amount) / 100
            self.total_calories.set(self.total_calories.get() + calories)
            self._save_user_data()
            messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–æ", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {food}: {calories:.1f} –∫–∫–∞–ª")

        add_btn = ctk.CTkButton(input_frame, text="–î–æ–±–∞–≤–∏—Ç—å", fg_color=ACCENT, hover_color=GLOW, command=add_food)
        add_btn.grid(row=0, column=4, padx=10, pady=5)

        ctk.CTkLabel(calories_block, text="–û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏:", font=("Segoe UI", 20, "bold"), text_color=GLOW).pack(pady=5)
        ctk.CTkLabel(calories_block, textvariable=self.total_calories, font=("Segoe UI", 18), text_color=TEXT_COLOR).pack()

        text = "\n".join([f"{food} ‚Äî {cal} –∫–∫–∞–ª / 100–≥" for food, cal in foods.items()])
        food_label = ctk.CTkLabel(calories_block, text=text, font=("Segoe UI", 16), text_color=TEXT_COLOR, justify="left")
        food_label.pack(pady=10, padx=20, anchor="w")

        tips = (
            "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n"
            "- –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º—ã—à—Ü.\n"
            "- –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—Ö–∞—Ä–∞ –∏ —Ñ–∞—Å—Ç—Ñ—É–¥–∞.\n"
            "- –ü–µ–π—Ç–µ –≤–æ–¥—É –ø–µ—Ä–µ–¥ –µ–¥–æ–π ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç.\n"
            "- –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫ ‚Äî —ç—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤."
        )
        ctk.CTkLabel(calories_block, text=tips, font=("Segoe UI", 14), text_color="#CFA0FF", justify="left").pack(pady=10, padx=20)

    # ---------------------------- Water ----------------------------
    def _build_water_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)
        title = ctk.CTkLabel(frame, text="–¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã", font=("Segoe UI", 26, "bold"), text_color=TEXT_COLOR)
        title.pack(pady=15)

        water_block = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        water_block.pack(pady=10, padx=20, fill="x")

        glass_container = ctk.CTkFrame(water_block, fg_color=WINDOW_BG)
        glass_container.pack(pady=10, side="left", padx=20)

        self.glass_canvas = ctk.CTkCanvas(glass_container, width=150, height=300, bg=MAIN_BG, highlightthickness=0)
        self.glass_canvas.pack(padx=10, pady=10)

        # Draw glass
        self.glass_canvas.create_rectangle(40, 20, 110, 280, outline=GLASS_OUTLINE, width=3)
        self.glass_canvas.create_arc(40, 260, 110, 280, start=0, extent=180, style="arc", outline=GLASS_OUTLINE, width=3)
        self.water_level = self.glass_canvas.create_rectangle(40, 280, 110, 280, fill=WATER_COLOR, outline="")

        slider = ctk.CTkSlider(water_block, orientation="vertical", from_=0, to=self.water_goal, number_of_steps=100, command=self.update_water_from_slider)
        slider.pack(side="left", padx=20, pady=10, fill="y")
        slider.set(self.water_intake.get())

        water_label = ctk.CTkLabel(water_block, textvariable=self.water_intake, font=("Segoe UI", 20, "bold"), text_color=GLOW)
        water_label.pack(side="left", padx=10, pady=5)
        goal_label = ctk.CTkLabel(water_block, text=f"/ {self.water_goal:.1f} –ª", font=("Segoe UI", 16), text_color=TEXT_COLOR)
        goal_label.pack(side="left", padx=5)

        bottom_frame = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        bottom_frame.pack(pady=10, padx=20, fill="x")

        btn_frame = ctk.CTkFrame(bottom_frame, fg_color=WINDOW_BG)
        btn_frame.pack(pady=10)

        for ml in [0.1, 0.25, 0.5, 1.0]:
            btn = ctk.CTkButton(btn_frame, text=f"+{ml} –ª", fg_color=ACCENT, hover_color=GLOW, width=80,
                                command=lambda m=ml: self.add_water(m))
            btn.pack(side="left", padx=15, pady=5)

        water_entry = ctk.CTkEntry(bottom_frame, textvariable=self.water_intake, width=100)
        water_entry.pack(pady=5, padx=10)
        water_entry.bind("<Return>", lambda e: self.update_water_from_entry(water_entry))

        tips = (
            "üíß –ü–µ–π—Ç–µ –≤–æ–¥—É —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.\n"
            "üíú –ù–µ –∂–¥–∏—Ç–µ –∂–∞–∂–¥—ã, –ø–µ–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.\n"
            "üåô –°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —É—Ç—Ä–æ–º ‚Äî –ø–æ–ª–µ–∑–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞!"
        )
        ctk.CTkLabel(bottom_frame, text=tips, font=("Segoe UI", 14), text_color="#CFA0FF", justify="left").pack(pady=10, padx=20)

    def update_water_from_slider(self, value):
        self.water_intake.set(round(float(value), 2))
        self._update_glass()

    def update_water_from_entry(self, entry):
        try:
            value = float(entry.get())
            if 0 <= value <= self.water_goal:
                self.water_intake.set(round(value, 2))
                self._update_glass()
            else:
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ {self.water_goal} –ª")
        except ValueError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    def add_water(self, amount):
        current = self.water_intake.get()
        new_value = min(current + amount, self.water_goal)
        self.water_intake.set(round(new_value, 2))
        self._update_glass()

    def _update_glass(self):
        progress = self.water_intake.get() / self.water_goal
        height = 260 * progress
        self.glass_canvas.coords(self.water_level, 40, 280 - height, 110, 280)
        self._save_user_data()

    # ---------------------------- Weight ----------------------------
    def _build_weight_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)
        title = ctk.CTkLabel(frame, text="–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞", font=("Segoe UI", 26, "bold"), text_color=TEXT_COLOR)
        title.pack(pady=15)

        weight_block = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        weight_block.pack(pady=10, padx=20, fill="x")

        weight_var = tk.DoubleVar(value=0.0)
        height_var = tk.DoubleVar(value=0.0)
        bmi_var = tk.StringVar(value="")

        entry_frame = ctk.CTkFrame(weight_block, fg_color=WINDOW_BG)
        entry_frame.pack(pady=10, fill="x")

        ctk.CTkLabel(entry_frame, text="–í–µ—Å (–∫–≥):", text_color=TEXT_COLOR, font=("Segoe UI", 16)).grid(row=0, column=0, padx=10, pady=5)
        ctk.CTkEntry(entry_frame, textvariable=weight_var, width=120).grid(row=0, column=1, padx=10)

        ctk.CTkLabel(entry_frame, text="–†–æ—Å—Ç (—Å–º):", text_color=TEXT_COLOR, font=("Segoe UI", 16)).grid(row=1, column=0, padx=10, pady=5)
        ctk.CTkEntry(entry_frame, textvariable=height_var, width=120).grid(row=1, column=1, padx=10)

        def calc_bmi():
            try:
                w = weight_var.get()
                h = height_var.get() / 100
                bmi = w / (h ** 2)
                bmi_var.set(f"–í–∞—à –ò–ú–¢: {bmi:.1f}")
                self.weight_text.set(f"{w} –∫–≥")
                if bmi < 18.5:
                    advice = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å:\n- –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è.\n- –î–æ–±–∞–≤—å—Ç–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n- –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–∏–ª–æ–≤—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏."
                elif 18.5 <= bmi < 25:
                    advice = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å:\n- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ.\n- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
                elif 25 <= bmi < 30:
                    advice = "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å:\n- –£–º–µ–Ω—å—à–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.\n- –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞—Ä–¥–∏–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏."
                else:
                    advice = "–û–∂–∏—Ä–µ–Ω–∏–µ:\n- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.\n- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–µ—Ç–∞ —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º.\n- –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
                advice_label.configure(text=advice)
            except Exception:
                bmi_var.set("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")

        calc_btn = ctk.CTkButton(weight_block, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢", fg_color=ACCENT, hover_color=GLOW, text_color="white", width=180)
        calc_btn.pack(pady=10)

        bmi_label = ctk.CTkLabel(weight_block, textvariable=bmi_var, font=("Segoe UI", 20, "bold"), text_color=GLOW)
        bmi_label.pack(pady=5)

        advice_label = ctk.CTkLabel(weight_block, text="", font=("Segoe UI", 14), text_color="#CFA0FF", justify="left")
        advice_label.pack(pady=5, padx=20)

    # ---------------------------- Health ----------------------------
    def _build_health_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)
        title = ctk.CTkLabel(frame, text="–ó–¥–æ—Ä–æ–≤—å–µ", font=("Segoe UI", 26, "bold"), text_color=TEXT_COLOR)
        title.pack(pady=15)

        health_block = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        health_block.pack(pady=10, padx=20, fill="x")

        ctk.CTkLabel(health_block, text="–®–∞–≥–æ–º–µ—Ç—Ä", font=("Segoe UI", 20, "bold"), text_color=TEXT_COLOR).pack(pady=5)
        step_entry = ctk.CTkEntry(health_block, textvariable=self.steps, width=120)
        step_entry.pack(pady=5)

        def add_steps(amount):
            self.steps.set(self.steps.get() + amount)
            self._save_user_data()

        btn_frame = ctk.CTkFrame(health_block, fg_color=WINDOW_BG)
        btn_frame.pack(pady=10)

        for steps in [100, 500, 1000]:
            btn = ctk.CTkButton(btn_frame, text=f"+{steps}", fg_color=ACCENT, hover_color=GLOW, width=80,
                                command=lambda s=steps: add_steps(s))
            btn.pack(side="left", padx=15, pady=5)

        def simulate_steps():
            total_steps = random.randint(100, 1000)
            step_increment = total_steps // 10
            current = self.steps.get()

            def add_increment(step=0):
                if step < 10:
                    self.steps.set(self.steps.get() + step_increment)
                    frame.after(500, add_increment, step + 1)
                else:
                    self.steps.set(current + total_steps)
                    self._save_user_data()
                    messagebox.showinfo("–°–∏–º—É–ª—è—Ü–∏—è", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {total_steps} —à–∞–≥–æ–≤")

            add_increment()

        sim_btn = ctk.CTkButton(health_block, text="–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏", fg_color=ACCENT, hover_color=GLOW, command=simulate_steps)
        sim_btn.pack(pady=10)

        pulse_var = tk.DoubleVar(value=0.0)
        ctk.CTkLabel(health_block, text="–ü—É–ª—å—Å (—É–¥/–º–∏–Ω):", font=("Segoe UI", 16), text_color=TEXT_COLOR).pack(pady=5)
        ctk.CTkEntry(health_block, textvariable=pulse_var, width=120).pack(pady=5)

        def analyze_pulse():
            pulse = pulse_var.get()
            if pulse < 60:
                txt = "–ü—É–ª—å—Å –Ω–∏–∂–µ –Ω–æ—Ä–º—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É."
            elif 60 <= pulse <= 100:
                txt = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
            else:
                txt = "–ü—É–ª—å—Å –≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –∏–∑–º–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞."
            messagebox.showinfo("–ü—É–ª—å—Å", txt)

        pulse_btn = ctk.CTkButton(health_block, text="–ê–Ω–∞–ª–∏–∑ –ø—É–ª—å—Å–∞", fg_color=ACCENT, hover_color=GLOW, command=analyze_pulse)
        pulse_btn.pack(pady=5)

    # ---------------------------- Meditation ----------------------------
    def _build_meditation_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)

        # Full-screen star background
        canvas = ctk.CTkCanvas(frame, bg=MAIN_BG, highlightthickness=0)
        canvas.pack(fill="both", expand=True)

        stars = []
        for _ in range(200):
            x, y = random.randint(0, 1100), random.randint(0, 700)
            size = random.randint(2, 6)
            color = random.choice(["#FFFFFF", "#E0FFFF", "#ADD8E6", "#87CEEB"])
            stars.append(canvas.create_oval(x, y, x+size, y+size, fill=color, outline=""))

        def twinkle():
            for s in stars:
                new_color = random.choice(["#FFFFFF", "#E0FFFF", "#ADD8E6", "#87CEEB"])
                canvas.itemconfig(s, fill=new_color)
            frame.after(500, twinkle)

        twinkle()

        content = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        content.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.5, relheight=0.7)

        title = ctk.CTkLabel(content, text="–ú–µ–¥–∏—Ç–∞—Ü–∏—è", font=("Segoe UI", 26, "bold"), text_color=GLOW)
        title.pack(pady=10)

        time_var = tk.StringVar(value="5")
        ctk.CTkLabel(content, text="–í—Ä–µ–º—è (–º–∏–Ω):", text_color=TEXT_COLOR, font=("Segoe UI", 16)).pack(pady=5)
        time_menu = ctk.CTkOptionMenu(content, variable=time_var, values=["1", "5", "10", "15", "20"], fg_color=ACCENT, button_color=GLOW)
        time_menu.pack(pady=5)

        timer_label = ctk.CTkLabel(content, text="00:00", font=("Segoe UI", 20, "bold"), text_color=TEXT_COLOR)
        timer_label.pack(pady=10)

        def start_meditation():
            minutes = int(time_var.get())
            seconds = minutes * 60
            start_btn.configure(state="disabled")

            def update_timer():
                nonlocal seconds
                if seconds > 0:
                    mins, secs = divmod(seconds, 60)
                    timer_label.configure(text=f"{mins:02d}:{secs:02d}")
                    seconds -= 1
                    frame.after(1000, update_timer)
                else:
                    start_btn.configure(state="normal")
                    messagebox.showinfo("–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            update_timer()

        start_btn = ctk.CTkButton(content, text="–ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", fg_color=ACCENT, hover_color=GLOW, command=start_meditation)
        start_btn.pack(pady=10)

        notes = (
            "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç:\n"
            "- –°–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å\n"
            "- –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é\n"
            "- –ü–æ–≤—ã—Å–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ\n"
            "- –£–ª—É—á—à–∏—Ç—å —Å–æ–Ω\n"
            "- –°–Ω–∏–∑–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ\n\n"
            "üí° –°–æ–≤–µ—Ç—ã:\n"
            "- –ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ.\n"
            "- –°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ, –¥–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ.\n"
            "- –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏: –≤–¥–æ—Ö ‚Äî 4 —Å–µ–∫, –≤—ã–¥–æ—Ö ‚Äî 4 —Å–µ–∫.\n"
            "- –ù–∞—á–Ω–∏—Ç–µ —Å 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–æ–≤–∏—á–æ–∫."
        )
        ctk.CTkLabel(content, text=notes, font=("Segoe UI", 14), text_color="#CFA0FF", justify="left").pack(pady=10, padx=20)

    # ---------------------------- Sleep ----------------------------
    def _build_sleep_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)

        # Full-screen star background
        canvas = ctk.CTkCanvas(frame, bg=MAIN_BG, highlightthickness=0)
        canvas.pack(fill="both", expand=True)

        stars = []
        for _ in range(200):
            x, y = random.randint(0, 1100), random.randint(0, 700)
            size = random.randint(2, 6)
            color = random.choice(["#FFFFFF", "#E0FFFF", "#ADD8E6", "#87CEEB"])
            stars.append(canvas.create_oval(x, y, x+size, y+size, fill=color, outline=""))

        def twinkle():
            for s in stars:
                new_color = random.choice(["#FFFFFF", "#E0FFFF", "#ADD8E6", "#87CEEB"])
                canvas.itemconfig(s, fill=new_color)
            frame.after(500, twinkle)

        twinkle()

        canvas.create_oval(600, 60, 670, 130, fill="#CFA0FF", outline="")
        canvas.create_oval(615, 60, 685, 130, fill=MAIN_BG, outline="")

        content = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        content.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.5, relheight=0.7)

        title = ctk.CTkLabel(content, text="–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞", font=("Segoe UI", 26, "bold"), text_color=GLOW)
        title.pack(pady=10)

        sleep_hours = tk.DoubleVar(value=0.0)
        ctk.CTkLabel(content, text="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Å–ø–∞–ª–∏?", text_color=TEXT_COLOR, font=("Segoe UI", 16)).pack(pady=5)
        ctk.CTkEntry(content, textvariable=sleep_hours, width=120).pack(pady=5)

        result_label = ctk.CTkLabel(content, text="", text_color="#CFA0FF", font=("Segoe UI", 16))
        result_label.pack(pady=10)

        def analyze_sleep():
            hours = sleep_hours.get()
            if hours < 5:
                txt = "üò¥ –û—á–µ–Ω—å –º–∞–ª–æ —Å–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–∞—Ç—å –º–∏–Ω–∏–º—É–º 7 —á–∞—Å–æ–≤."
            elif 5 <= hours < 7:
                txt = "üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ–Ω. –ù—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞."
            elif 7 <= hours < 9:
                txt = "üíú –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞."
            else:
                txt = "üí§ –í—ã —Å–ø–∏—Ç–µ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ª–æ–∂–∏—Ç—å—Å—è –ø–æ–∑–∂–µ."
            result_label.configure(text=txt)
            self._save_user_data()

        analyze_btn = ctk.CTkButton(content, text="–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞", fg_color=ACCENT, hover_color=GLOW, command=analyze_sleep)
        analyze_btn.pack(pady=5)

        notes = (
            "üò¥ –°–æ–Ω –≤–∞–∂–µ–Ω –¥–ª—è:\n"
            "- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞\n"
            "- –£–ª—É—á—à–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏\n"
            "- –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞\n"
            "- –†–µ–≥—É–ª—è—Ü–∏–∏ –≥–æ—Ä–º–æ–Ω–æ–≤\n"
            "- –ö–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞\n"
            "- –£–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n"
            "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞:\n"
            "- –õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è.\n"
            "- –ò–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞.\n"
            "- –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º–Ω—É—é –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É.\n"
            "- –ù–µ—Ç –∫–æ—Ñ–µ–∏–Ω—É –≤–µ—á–µ—Ä–æ–º.\n"
            "- –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å —Å —á—Ç–µ–Ω–∏–µ–º –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–µ–π.\n"
            "- –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º –¥–Ω–µ–º."
        )
        ctk.CTkLabel(content, text=notes, font=("Segoe UI", 14), text_color="#CFA0FF", justify="left").pack(pady=10, padx=20)

    # ---------------------------- Goals ----------------------------
    def _build_goals_tab(self, frame):
        frame.configure(fg_color=MAIN_BG)
        title = ctk.CTkLabel(frame, text="–¶–µ–ª–∏", font=("Segoe UI", 26, "bold"), text_color=TEXT_COLOR)
        title.pack(pady=15)

        goals_block = ctk.CTkFrame(frame, fg_color=WINDOW_BG, corner_radius=15, border_width=2, border_color=GLOW)
        goals_block.pack(pady=10, padx=20, fill="x")

        goal_desc = tk.StringVar()
        goal_value = tk.DoubleVar()
        goal_period = tk.StringVar(value="1 –º–µ—Å—è—Ü")

        ctk.CTkLabel(goals_block, text="–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:", font=("Segoe UI", 16), text_color=TEXT_COLOR).pack(pady=5)
        ctk.CTkEntry(goals_block, textvariable=goal_desc, width=300).pack(pady=5)

        ctk.CTkLabel(goals_block, text="–ó–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä., 5 –∫–≥):", font=("Segoe UI", 16), text_color=TEXT_COLOR).pack(pady=5)
        ctk.CTkEntry(goals_block, textvariable=goal_value, width=120).pack(pady=5)

        ctk.CTkLabel(goals_block, text="–°—Ä–æ–∫:", font=("Segoe UI", 16), text_color=TEXT_COLOR).pack(pady=5)
        ctk.CTkOptionMenu(goals_block, variable=goal_period, values=["1 –Ω–µ–¥–µ–ª—è", "1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞"], fg_color=ACCENT, button_color=GLOW).pack(pady=5)

        def add_goal():
            desc = goal_desc.get()
            value = goal_value.get()
            period = goal_period.get()
            if not desc or value <= 0:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return

            advice = ""
            if "–≤–µ—Å" in desc.lower() and "—Å–±—Ä–æ—Å–∏—Ç—å" in desc.lower():
                advice = (
                    "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞:\n"
                    "- –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π (–µ—à—å—Ç–µ –º–µ–Ω—å—à–µ, —á–µ–º —Ç—Ä–∞—Ç–∏—Ç–µ).\n"
                    "- –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä–¥–∏–æ 3‚Äì4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.\n"
                    "- –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏.\n"
                    "- –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã."
                )
            elif "–≤–µ—Å" in desc.lower() and "–Ω–∞–±—Ä–∞—Ç—å" in desc.lower():
                advice = (
                    "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞:\n"
                    "- –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞.\n"
                    "- –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n"
                    "- –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–∏–ª–æ–≤—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.\n"
                    "- –ï—à—å—Ç–µ —á–∞—â–µ, –Ω–æ –º–µ–Ω—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏."
                )
            else:
                advice = "üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã: –†–∞–∑–±–µ–π—Ç–µ —Ü–µ–ª—å –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å!"

            self.goals.append({"desc": desc, "value": value, "period": period, "advice": advice})
            self._save_user_data()
            messagebox.showinfo("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞", f"–¶–µ–ª—å: {desc}\n–°–æ–≤–µ—Ç—ã:\n{advice}")

        add_btn = ctk.CTkButton(goals_block, text="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", fg_color=ACCENT, hover_color=GLOW, command=add_goal)
        add_btn.pack(pady=10)

        goals_text = "\n".join([f"{g['desc']} ({g['value']} –∑–∞ {g['period']})" for g in self.goals])
        ctk.CTkLabel(goals_block, text=goals_text or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π", font=("Segoe UI", 14), text_color=TEXT_COLOR, justify="left").pack(pady=10, padx=20)

        common_goals = (
            "üéØ –û–±—â–∏–µ —Ü–µ–ª–∏ —Ñ–∏—Ç–Ω–µ—Å–∞:\n"
            "- –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å (–Ω–∞–ø—Ä., 5-10 –∫–≥ –∑–∞ 3 –º–µ—Å—è—Ü–∞)\n"
            "- –ù–∞–±—Ä–∞—Ç—å –º—ã—à—Ü—ã\n"
            "- –ü—Ä–æ–±–µ–∂–∞—Ç—å –º–∏–ª—é –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
            "- –ó–∞–Ω–∏–º–∞—Ç—å—Å—è 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
            "- –£–ª—É—á—à–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å —Å –π–æ–≥–æ–π\n"
            "- –î–æ—Å—Ç–∏—á—å 10 000 —à–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
            "- –ü–∏—Ç–∞—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤–µ–µ\n"
            "- –ü–æ–ª—É—á–∞—Ç—å –ª—É—á—à–∏–π —Å–æ–Ω (7-9 —á–∞—Å–æ–≤)"
        )
        ctk.CTkLabel(goals_block, text=common_goals, font=("Segoe UI", 14), text_color="#CFA0FF", justify="left").pack(pady=10, padx=20)

    # ---------------------------- Run ----------------------------
    def run(self):
        self.mainloop()

if __name__ == "__main__":
    app = FitnessApp()
    app.run()
